/*
–ì–∞–±–∏–¥—É–ª–ª–∏–Ω –ê.–≠.
–í–∞—Ä–∏–∞–Ω—Ç ‚Ññ15.
–ó–∞–¥–∞—á–∞ 2.35.
–î–∞–Ω–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–∞—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–∞ ùëö √ó ùëõ, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å–ª—É—á–∞–∏ÃÜ–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏. –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ùëò ‚â§ ùëõ.
–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–∏ÃÜ —Å–¥–≤–∏–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ k –ø–æ–∑–∏—Ü–∏–∏ÃÜ ¬´–ø–æ –∑–º–µ–∏ÃÜ–∫–µ¬ª, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –∏
–ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ. –ß–∞—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–∏ÃÜ —Å—Ç—Ä–æ–∫–∏, ¬´–≤—ã—Ö–æ–¥—è—â–∏—Ö¬ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Ç—Ä–∏—Ü—ã –≤–ø—Ä–∞–≤–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞
—Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É, —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–∏ÃÜ —Å—Ç—Ä–æ–∫–∏ —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –≤ –≤–µ—Ä—Ö–Ω—é—é —Å—Ç—Ä–æ—á–∫—É.
 */

package theme2;

import java.util.Scanner;

public class Matrix {
    private int countLines;
    private int countColumn;

    private int[][] matrixArray;


    public Matrix() throws Exception {
        this.countLines = setParameter("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫");
        this.countColumn = setParameter("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤");

        this.matrixArray = createMatrix(countLines, countColumn);

    }

    public int getCountLines() {
        return countLines;
    }

    public int getCountColumn() {
        return countColumn;
    }

    private void setMatrixArray(int[][] matrixArray) {
        this.matrixArray = matrixArray;
    }

    public int[][] getMatrixArray() {
        return matrixArray;
    }

    private int setShiftParameter() throws Exception {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–¥–≤–∏–≥–∞:");
        Scanner scanner = new Scanner(System.in);
        int shiftParameter = scanner.nextInt();
        if (shiftParameter < 0) {
            throw new Exception("–ü–∞—Ä–∞–º–µ—Ç—Ä —Å–¥–≤–∏–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º >= 0");
        }

        return shiftParameter;
    }

    private int setParameter(String parameter) throws Exception {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ " + parameter);
        Scanner input = new Scanner(System.in);
        int inputParameter = input.nextInt();
        if (inputParameter < 1) {
            throw new Exception(parameter + " –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
        }

        return inputParameter;
    }

    public static void main(String[] args) throws Exception {
        Matrix matrix = new Matrix();
        showArray(matrix.getMatrixArray());
        //shiftMatrix(matrix.getMatrixArray(), matrix.setShiftParameter());
        matrix.shiftArray(matrix.getMatrixArray(), matrix.setShiftParameter());
        showArray(matrix.getMatrixArray());
    }


    private static int[][] createMatrix(int countLines, int countColumn) {
        int[][] matrix = new int[countLines][countColumn];

        for (int i = 0; i < countLines; i++) {
            for (int j = 0; j < countColumn; j++) {
                matrix[i][j] =(int) (Math.random() * 10);
            }
        }
        return matrix;
    }

    private static void showArray(int[][] array){
        for (int[] str: array) {
            for (int i = 0; i < array[0].length; i++) {
                System.out.print(str[i] + "\t");
            }
            System.out.println();
        }
        System.out.println();
    }

    private static void shiftMatrix(int[][] array, int parameter){
        int countLines = array.length;
        int countColumns = array[0].length;
        int buff = 0;
        int temp = 0;

        while (parameter > 0){
            for (int i = 0; i < countLines ; i++) {
                for (int j = 0; j < countColumns; j++) {
                    if (i == 0 && j == 0){
                        buff = array[i][j];
                        array[i][j] = array[countLines - 1][countColumns - 1];
                    }else {
                        temp = array[i][j];
                        array[i][j] = buff;
                        buff = temp;
                    }
                }
            }
            parameter--;
        }
    }

    private void shiftArray(int[][] array, int parameter){
        int countLines = array.length;                                      //–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        int countColumns = array[0].length;                                 //–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
        int[][] shiftedArray = new int[countLines][countColumns];

        for (int i = 0; i < countLines; i++) {
            for (int j = 0; j < countColumns; j++) {
                if (j + parameter < countColumns){
                    shiftedArray[i][j + parameter] = array[i][j];
                }
                else if (i < (countLines - 1)) {
                    shiftedArray[i + 1][parameter - (countColumns - j)] = array[i][j];
                }
                else {
                    shiftedArray[0][parameter - (countColumns - j)] = array[i][j];
                }
            }
        }

        setMatrixArray(shiftedArray);
    }
}
